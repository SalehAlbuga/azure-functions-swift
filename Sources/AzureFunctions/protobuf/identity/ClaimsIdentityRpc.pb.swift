// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ClaimsIdentityRpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// protobuf vscode extension: https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Light-weight representation of a .NET System.Security.Claims.ClaimsIdentity object.
/// This is the same serialization as found in EasyAuth, and needs to be kept in sync with
/// its ClaimsIdentitySlim definition, as seen in the WebJobs extension:
/// https://github.com/Azure/azure-webjobs-sdk-extensions/blob/dev/src/WebJobs.Extensions.Http/ClaimsIdentitySlim.cs
struct RpcClaimsIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var authenticationType: NullableString {
    get {return _authenticationType ?? NullableString()}
    set {_authenticationType = newValue}
  }
  /// Returns true if `authenticationType` has been explicitly set.
  var hasAuthenticationType: Bool {return self._authenticationType != nil}
  /// Clears the value of `authenticationType`. Subsequent reads from it will return its default value.
  mutating func clearAuthenticationType() {self._authenticationType = nil}

  var nameClaimType: NullableString {
    get {return _nameClaimType ?? NullableString()}
    set {_nameClaimType = newValue}
  }
  /// Returns true if `nameClaimType` has been explicitly set.
  var hasNameClaimType: Bool {return self._nameClaimType != nil}
  /// Clears the value of `nameClaimType`. Subsequent reads from it will return its default value.
  mutating func clearNameClaimType() {self._nameClaimType = nil}

  var roleClaimType: NullableString {
    get {return _roleClaimType ?? NullableString()}
    set {_roleClaimType = newValue}
  }
  /// Returns true if `roleClaimType` has been explicitly set.
  var hasRoleClaimType: Bool {return self._roleClaimType != nil}
  /// Clears the value of `roleClaimType`. Subsequent reads from it will return its default value.
  mutating func clearRoleClaimType() {self._roleClaimType = nil}

  var claims: [RpcClaim] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _authenticationType: NullableString? = nil
  fileprivate var _nameClaimType: NullableString? = nil
  fileprivate var _roleClaimType: NullableString? = nil
}

/// Light-weight representation of a .NET System.Security.Claims.Claim object.
/// This is the same serialization as found in EasyAuth, and needs to be kept in sync with
/// its ClaimSlim definition, as seen in the WebJobs extension:
/// https://github.com/Azure/azure-webjobs-sdk-extensions/blob/dev/src/WebJobs.Extensions.Http/ClaimSlim.cs
struct RpcClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: String = String()

  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RpcClaimsIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RpcClaimsIdentity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "authentication_type"),
    2: .standard(proto: "name_claim_type"),
    3: .standard(proto: "role_claim_type"),
    4: .same(proto: "claims"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._authenticationType)
      case 2: try decoder.decodeSingularMessageField(value: &self._nameClaimType)
      case 3: try decoder.decodeSingularMessageField(value: &self._roleClaimType)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.claims)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._authenticationType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._nameClaimType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._roleClaimType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.claims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claims, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RpcClaimsIdentity, rhs: RpcClaimsIdentity) -> Bool {
    if lhs._authenticationType != rhs._authenticationType {return false}
    if lhs._nameClaimType != rhs._nameClaimType {return false}
    if lhs._roleClaimType != rhs._roleClaimType {return false}
    if lhs.claims != rhs.claims {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RpcClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RpcClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RpcClaim, rhs: RpcClaim) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
